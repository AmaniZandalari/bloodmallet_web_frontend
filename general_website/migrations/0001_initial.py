# Generated by Django 3.0.4 on 2020-03-20 17:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import general_website.models.simulation
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Uuid used to identify a User.', primary_key=True, serialize=False)),
                ('bloodytext', models.CharField(blank=True, max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('title', models.TextField(help_text='Broadcast will be shown from start_at to end_at.', max_length=124)),
                ('message', models.TextField(help_text='Broadcast will be shown from start_at to end_at.', max_length=2048)),
                ('level', models.CharField(choices=[('info', 'info'), ('success', 'success'), ('warning', 'warning'), ('danger', 'danger'), ('primary', 'primary'), ('secondary', 'secondary')], max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_calc_instance_generation', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('tokenized_name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='FightStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('tokenized_name', models.CharField(max_length=32)),
                ('description', models.TextField(blank=True, max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('tokenized_name', models.CharField(max_length=32)),
                ('factions', models.ManyToManyField(related_name='races', to='general_website.Faction')),
            ],
        ),
        migrations.CreateModel(
            name='SimulationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the simulation type. Like 'trinket simulations'.", max_length=32)),
                ('command', models.CharField(help_text="Actual command for bloodytools to do the simulation type. E.g. 'trinkets'", max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='WowClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('tokenized_name', models.CharField(max_length=16)),
                ('races', models.ManyToManyField(related_name='wow_classes', to='general_website.Race')),
            ],
        ),
        migrations.CreateModel(
            name='WowSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('tokenized_name', models.CharField(max_length=16)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wow_specs', to='general_website.WowClass')),
            ],
        ),
        migrations.CreateModel(
            name='Teleporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('additional_information', models.CharField(blank=True, max_length=500, null=True)),
                ('faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='general_website.Faction')),
            ],
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Uuid used to identify a specific Simulation.', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Name of the chart', max_length=64)),
                ('custom_profile', models.TextField(blank=True, help_text='Define your own character here, instead of using the standard profile (your input will overwrite the standard profile).', max_length=2048)),
                ('custom_fight_style', models.TextField(blank=True, help_text='Define your own fight_style.', max_length=2048)),
                ('custom_apl', models.TextField(blank=True, help_text='Define your characters APL.', max_length=2048)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('failed', models.BooleanField(default=False, help_text='If Simulation failed somehow this bool is set to True. Otherwise stays False forever.')),
                ('fight_style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='general_website.FightStyle')),
                ('simulation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='general_website.SimulationType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to=settings.AUTH_USER_MODEL)),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='general_website.WowClass')),
                ('wow_spec', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='general_website.WowSpec')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Uuid used to identify a specific simulation Result.', primary_key=True, serialize=False)),
                ('result', models.FileField(upload_to=general_website.models.simulation.save_simulation_result)),
                ('simc_hash', models.CharField(blank=True, help_text='SimulationCraft commit hash to identify the used version. (Allows reproduction of a result.)', max_length=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('simulation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='general_website.Simulation')),
            ],
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('PENDING', 'pending'), ('INPROGRESS', 'in progress'), ('DONE', 'done'), ('ERROR', 'error')], max_length=20)),
                ('progress', models.PositiveSmallIntegerField(help_text="0-100, but 100 doesn't mean, that the data is available. Simulation reached 100%, though.")),
                ('log', models.TextField(blank=True, help_text='Log messages from the responsible worker.')),
                ('simulation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='general_website.Simulation')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fight_style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_results', to='general_website.FightStyle')),
                ('result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='general_result', to='general_website.Result')),
                ('simulation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_results', to='general_website.SimulationType')),
                ('wow_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_results', to='general_website.WowClass')),
                ('wow_spec', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_result', to='general_website.WowSpec')),
            ],
            options={
                'unique_together': {('wow_class', 'wow_spec', 'simulation_type', 'fight_style')},
            },
        ),
    ]
